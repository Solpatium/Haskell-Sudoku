-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Initial project template from stack
--   
--   Please see README.md
@package sudoku
@version 0.1.0.0

module SudokuAbstract

-- | Index represents a group, column or a row
type Index = Int

-- | Index represents a square in 2D
type Index2D = (Index, Index)

-- | nextIndex returns next Index2D
nextIndex :: (Num t1, Num t, Eq t) => (t, t1) -> (t, t1)

-- | SudokuValue is a class of types representing sudoku values (1-9).
class (Show t, Eq t) => SudokuValue t
fromInt :: SudokuValue t => Int -> t
getAll :: SudokuValue t => [t]
fromInt :: SudokuValue t => Int -> t
getAll :: SudokuValue t => [t]

-- | SudokuSquare is a class of types representing a square in susoku (it
--   either has a value, or it is empty).
class SudokuSquare (t :: * -> *)

-- | Returns value wrapped in Maybe. Returns Nothing if value is not known.
value :: (SudokuSquare t, SudokuValue value) => t value -> Maybe value

-- | Returns true if value is known, otherwise false
isKnown :: (SudokuSquare t, SudokuValue value) => t value -> Bool

-- | Takes a SudokuValue and returns a square with this value
known :: (SudokuSquare t, SudokuValue value) => value -> t value

-- | Returns unknown square
unknown :: (SudokuSquare t, SudokuValue value) => t value

-- | Returns value wrapped in Maybe. Returns Nothing if value is not known.
value :: (SudokuSquare t, SudokuValue value) => t value -> Maybe value

-- | Returns true if value is known, otherwise false
isKnown :: (SudokuSquare t, SudokuValue value) => t value -> Bool

-- | Takes a SudokuValue and returns a square with this value
known :: (SudokuSquare t, SudokuValue value) => value -> t value

-- | Returns unknown square
unknown :: (SudokuSquare t, SudokuValue value) => t value

-- | SudokuBoard is a class of types representing sudoku board.
class SudokuBoard (t :: * -> *)

-- | Returns square from given position.
element :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index2D -> square val

-- | Replace square at given position with a new square
replace :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index2D -> square val -> t (square val)

-- | Returns list of values from given row
getRow :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index -> [val]

-- | Returns list of values from given column
getColumn :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index -> [val]

-- | Returns list of values from given group (square 3x3)
getGroup :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index -> [val]

-- | Takes a list of values in int representation (0-9) and returns a board
--   with those values
fromIntList :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => [Int] -> t (square val)

-- | Returns square from given position.
element :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index2D -> square val

-- | Replace square at given position with a new square
replace :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index2D -> square val -> t (square val)

-- | Returns list of values from given row
getRow :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index -> [val]

-- | Returns list of values from given column
getColumn :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index -> [val]

-- | Returns list of values from given group (square 3x3)
getGroup :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => t (square val) -> Index -> [val]

-- | Takes a list of values in int representation (0-9) and returns a board
--   with those values
fromIntList :: (SudokuBoard t, SudokuSquare square, SudokuValue val) => [Int] -> t (square val)

-- | squaresValues takes a list of squares and returns their values.
squaresValues :: (SudokuSquare s, SudokuValue v) => [s v] -> [v]

-- | Helper function, returns true if square at given position is known
valKnown :: (SudokuValue value, SudokuSquare t, SudokuBoard t1) => t1 (t value) -> Index2D -> Bool

-- | possibilities takes a board, index2d and returns possible values for
--   the square
possibilities :: (SudokuBoard b, SudokuSquare s, SudokuValue v) => b (s v) -> Index2D -> [v]

-- | Takes a string and returns a filled board
readBoard :: (SudokuValue v, SudokuSquare s, SudokuBoard b) => String -> Maybe (b (s v))

module SimpleSolve

-- | Very basic alghoritm of solving a sudoku.
solve :: (SudokuBoard b, SudokuSquare s, SudokuValue v) => b (s v) -> Maybe (b (s v))

module ProjectEuler
projectEuler96 :: (SudokuValue v, SudokuSquare t1, SudokuBoard t2, Foldable t, Functor t) => t (Maybe (t2 (t1 v))) -> Int

module Value.Data
data DataValue
fromInt :: SudokuValue t => Int -> t
getAll :: SudokuValue t => [t]

-- | A specialised variant of <a>showsPrec</a>, using precedence context
--   zero, and returning an ordinary <a>String</a>.
show :: Show a => a -> String
instance Control.DeepSeq.NFData Value.Data.DataValue
instance GHC.Generics.Generic Value.Data.DataValue
instance GHC.Classes.Eq Value.Data.DataValue
instance GHC.Show.Show Value.Data.DataValue
instance SudokuAbstract.SudokuValue Value.Data.DataValue

module Value.Int
data IntValue
fromInt :: SudokuValue t => Int -> t
getAll :: SudokuValue t => [t]
instance Control.DeepSeq.NFData Value.Int.IntValue
instance GHC.Generics.Generic Value.Int.IntValue
instance GHC.Classes.Eq Value.Int.IntValue
instance GHC.Show.Show Value.Int.IntValue
instance SudokuAbstract.SudokuValue Value.Int.IntValue

module Value.Char
data CharValue
fromInt :: SudokuValue t => Int -> t
getAll :: SudokuValue t => [t]
instance Control.DeepSeq.NFData Value.Char.CharValue
instance GHC.Generics.Generic Value.Char.CharValue
instance GHC.Classes.Eq Value.Char.CharValue
instance GHC.Show.Show Value.Char.CharValue
instance SudokuAbstract.SudokuValue Value.Char.CharValue

module Value.Integer
data IntegerValue
fromInt :: SudokuValue t => Int -> t
getAll :: SudokuValue t => [t]
instance Control.DeepSeq.NFData Value.Integer.IntegerValue
instance GHC.Generics.Generic Value.Integer.IntegerValue
instance GHC.Classes.Eq Value.Integer.IntegerValue
instance GHC.Show.Show Value.Integer.IntegerValue
instance SudokuAbstract.SudokuValue Value.Integer.IntegerValue

module Square.Simple

-- | SimpleSquare does practically the same thing as Maybe, there is either
--   a Known value, or it is Unknown.
data SimpleSquare val
instance Control.DeepSeq.NFData val => Control.DeepSeq.NFData (Square.Simple.SimpleSquare val)
instance GHC.Generics.Generic (Square.Simple.SimpleSquare val)
instance GHC.Classes.Eq val => GHC.Classes.Eq (Square.Simple.SimpleSquare val)
instance SudokuAbstract.SudokuValue v => GHC.Show.Show (Square.Simple.SimpleSquare v)
instance SudokuAbstract.SudokuSquare Square.Simple.SimpleSquare

module Square.Maybe

-- | MaybeSquare is just an alias of maybe. It is created to check if Maybe
--   is somehow faster than a "custom Maybe" - SimpleSquare.
type MaybeSquare = Maybe
instance SudokuAbstract.SudokuSquare Square.Maybe.MaybeSquare

module Board.List

-- | ListBoard is just a wrapped list
data ListBoard square
instance Control.DeepSeq.NFData square => Control.DeepSeq.NFData (Board.List.ListBoard square)
instance GHC.Generics.Generic (Board.List.ListBoard square)
instance GHC.Classes.Eq square => GHC.Classes.Eq (Board.List.ListBoard square)
instance (SudokuAbstract.SudokuSquare s, SudokuAbstract.SudokuValue v) => GHC.Show.Show (Board.List.ListBoard (s v))
instance SudokuAbstract.SudokuBoard Board.List.ListBoard

module Board.Vector

-- | VectorBoard is just a wrapped vector. It should be faster than
--   ListBoard, because random access is O(1).
data VectorBoard square
instance Control.DeepSeq.NFData square => Control.DeepSeq.NFData (Board.Vector.VectorBoard square)
instance GHC.Generics.Generic (Board.Vector.VectorBoard square)
instance GHC.Classes.Eq square => GHC.Classes.Eq (Board.Vector.VectorBoard square)
instance SudokuAbstract.SudokuBoard Board.Vector.VectorBoard

module Benchmarks
benchmarks :: IO ()
